import lingo/pegcode/driver;
import string;
import runtime;

export {
    Prog : (d: [Decl], b: [Statement]);

    Decl : (v: Var, t: Type);

    Type ::= IntType, ArrayType;
    IntType : ();
    ArrayType : (t: Type);

    Expr ::= Array, Update, Unit;
    Unit ::= Int, Sub, Add, Div, Mult, Negative, Var, Apply;

    Add : (v1: Unit, v2: Unit);
    Sub : (v1: Unit, v2: Unit);
    Mult : (v1: Unit, v2 : Unit);
    Div : (v1: Unit, v2 : Unit);
    Negative : (v: Unit);
    Int : (val: int);
    Var : (val: string);
    Array : (e: [Expr]);
    Apply : (arr: Expr, i: Expr);
    Update : (arr: Expr, i: Expr, val: Expr);
    
    Statement ::= Assign, Test, Sequence, Selection, Iteration, Print;
    Assign : (v: Var, e: Expr);
    Sequence : (seq: [Statement]);
    Selection : (sel: [Statement]);
    Iteration : (b: Statement);
    Print : (e: Expr);

    Test : (b: Bool);
    Bool ::= And, Or, Pred;
    And : (b1: Bool, b2: Bool);
    Or : (b1: Bool, b2: Bool);
    Not : (b: Bool);
    Pred : (e1: Expr, e2: Expr, c: Condition);
    Condition ::= Eq, NotEq, LsEq, GrEq, Ls, Gr;
    Eq(); NotEq(); LsEq(); GrEq(); Ls(); Gr();

    s2ast(s: string) -> Prog;
}

nemoLingo : ref Maybe<[PegOp]> = ref None();
buildSub(xs: [flow]) -> Sub;
buildDiv(xs: [flow]) -> Div;
buildSel(xs: [flow]) -> Selection;
buildSeq(xs: [flow]) -> Sequence;
buildArray(xs: [flow]) -> Array;

buildSub(xs) {
    fold(xs[1], xs[0], \acc, x -> Sub(acc, x))
}

buildDiv(xs) {
    fold(xs[1], xs[0], \acc, x -> Div(acc, x))
}

buildSel(xs) {
    Selection(arrayPush(xs[1], xs[0]))
}

buildSeq(xs) {
    Sequence(xs[0])
}

buildArray(xs) {
    Array(concat(xs[0], xs[1]))
}

s2ast(s) {
    parsic(
        onlyOnce(
            nemoLingo, \ -> {
		compilePegGrammar("#include nemo.lingo");
	    }),
        s,
        pegActions(
            [
                Pair("buildArray", buildArray),
                Pair("buildSel", buildSel),
                Pair("buildSeq", buildSeq),
                Pair("buildSub", buildSub),
                Pair("buildDiv", buildDiv)
            ]
            )
        )
}

