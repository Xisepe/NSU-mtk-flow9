import runtime;
import lingo/pegcode/driver;

Add : (v1: Unit, v2: Unit);
Mult : (v1: Unit, v2 : Unit);
Unit ::= Int, Add, Mult;
Int : (val: int);

// Singleton keeping the compiled grammar
lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

s2ast(s)-> Unit {
    parsic(onlyOnce(lingoGrammarOp, \ -> {
		compilePegGrammar("#include C:\nsu-courses\translation-compilation\lab5\simple_arithmetic.lingo");
	}), s, defaultPegActions)
}

_ast2s(ast: Unit, par)-> string {
    switch (ast) {
        Int(val): i2s(val);
        Add(v1,v2): {
            arr = ast2s(v1)+ "+"+ ast2s(v2);
            if(par) 
                concatStrings(["(", arr, ")"])
            else 
                arr;
        }
        Mult(v1,v2): concatStrings([_ast2s(v1,true), "*", _ast2s(v2,true)]);        
    }
}

ast2s(ast) {
    _ast2s(ast, false)
}

ast2i(ast) {
    switch(ast) {
        Int(v) : v;
        Add(v1,v2): ast2i(v1) + ast2i(v2);
        Mult(v1,v2): ast2i(v1) * ast2i(v2);
    }
}

main() {
    ast = s2ast("(1+2)*3+4*(3+4*5)");
    println(ast);
    println(ast2s(ast));
    println(ast2i(ast));
    quit(0);
}
