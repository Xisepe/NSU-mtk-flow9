import ast;
import dynamic;
import linkedunithashmap;
import ds/set;

export {
    SRule : (term: Unit, substitude: Unit);
    Match : (subs: Tree<string, Unit>);
    
    addRule(r: Set<SRule>, s: string) -> Set<SRule>;
    
    cost(e: Unit)-> int;

    match(ex: Unit, pattern: Unit) -> Maybe<Match>;
    replaceNode(substitude: Unit, structBuilder: (Unit)->Unit) -> Unit;

    applyRulesToTerms(terms: LinkedUnitHashMap, rules: Set<SRule>, addPred: (Unit)->bool)->void;
    findCandidates(expr: Unit, tb: (Unit) -> Unit, rules: Set<SRule>, ogCost: int) -> Simplification;
}

BiOp ::= Add, Mult, Sub, Div;

addRule(r: Set<SRule>, s: string) -> Set<SRule> {
    ss = strSplit(s, "=");
    insertSet(r,SRule(s2ast(ss[0]), s2ast(ss[1])))    
}

_buildMatchedTerm(e: Unit, t: Tree<string, Unit>) {
    self = \v->_buildMatchedTerm(v, t);
    switch (e) {
        Int(v): Int(v);
        Var(x): either(lookupTree(t, x), Var(x));
        Negative(v): Negative(self(v));
        Add(a,b): Add(self(a),self(b));
        Mult(a,b): Mult(self(a),self(b));
        Div(a,b): Div(self(a),self(b));
        Sub(a,b): Sub(self(a),self(b));
    }
}

buildMatchedTerm(r: SRule, m: Match) -> Unit {
    _buildMatchedTerm(r.substitude, m.subs);
}

_biMatch(ex: Unit, pattern: Unit) {
    if (isSameStructType(pattern, ex)) {
        p = cast(pattern: Unit -> BiOp);
        e = cast(ex : Unit -> BiOp);
        l = _match(e.v1, p.v1);
        r = _match(e.v2, p.v2);
        maybeBind2(\a,b-> {
            flag = isEmptyTree(filterTree(a, \k,v-> eitherFn(lookupTree(b, k), \val->val!=v, \->false)));
            if (flag) {
                Some(mergeTree(a,b))
            } else None()
        })(l,r)
    } else {
        None()
    }     
}

_match(ex: Unit, pattern: Unit) -> Maybe<Tree<string, Unit>> {
    switch(pattern) {
        Int(v): if (pattern == ex) Some(makeTree()) else None();
        Var(x): Some(makeTree1(x, ex));
        Negative(v): {
            if (isSameStructType(pattern, ex)) {
                _match(ex.v, v)
            } else {
                None();
            }
        }
        Add(a,b): _biMatch(ex, pattern);
        Sub(a,b): _biMatch(ex, pattern);
        Mult(a,b): _biMatch(ex, pattern);
        Div(a,b): _biMatch(ex, pattern);
    }    
}

match(ex: Unit, pattern: Unit) -> Maybe<Match> {
    maybeMap(_match(ex,pattern), \t-> Match(t))
}

replaceNode(substitude: Unit, structBuilder: (Unit)->Unit) -> Unit {
    structBuilder(substitude)
}

cost(e: Unit) ->int {
    _cost(e, 0)
}

_cost(e: Unit, init: int)-> int {
    biOp = \a,b-> _cost(a, init) + _cost(b, init) + 1;
    switch (e) {
        Int(v): 1;
        Var(x): 1;
        Negative(v): _cost(v, init) + 1;
        Add(a,b): biOp(a,b);
        Sub(a,b): biOp(a,b);
        Mult(a,b): biOp(a,b);
        Div(a,b): biOp(a,b);        
    }
}

Simplification(trees: LinkedUnitHashMap, nodes: LinkedUnitHashMap, minCost: int);

applyRulesToTerms(terms: LinkedUnitHashMap, rules: Set<SRule>, addPred: (Unit)->bool) {
    iterLHM(terms, \u -> {
        iterSet(
            rules,
            \ri-> {
                maybeApply(
                    maybeMap(
                        match(u, ri.term),
                        \t->buildMatchedTerm(ri, t)
                    ),
                    \term-> {
                        if(addPred(term)) {
                            pushUnit(terms, term)
                        } else nop();                        
                    }
                )}           
        )
    })
}

_leaf(expr: Unit, tb: (Unit) -> Unit) -> Simplification {
    terms = makeLinkedUnitHashMap();
    pushUnit(terms, expr);
    trees = makeLinkedUnitHashMap();
    t = tb(expr);
    pushUnit(trees, tb(expr));
    Simplification(trees, terms, cost(t))
}

_filterMin(m: LinkedUnitHashMap, min: int)->int {
    mmin = ref min;
    iterLHM(m, \u-> {
        c = cost(u);
        if (c < ^mmin) {
            mmin := c;
            nop()
        } else nop()
    });
    filterLHM(m, \u -> cost(u) > ^mmin);
    ^mmin      
}

_biFindCandidates(v1: Unit, v2: Unit,struct: (Unit,Unit)-> Unit, tb: (Unit) -> Unit, rules: Set<SRule>, ogCost: int) -> Simplification {
    l = findCandidates(v1, \u->tb(struct(u,v2)), rules, ogCost);
    r = findCandidates(v2, \u->tb(struct(v1,u)), rules, ogCost);
    //build all possible permutation of nodes at current step, then apply all possible rules and filter min
    nodes = cartesianMapLHS(l.nodes, r.nodes, \u1,u2->struct(u1,u2));
    applyRulesToTerms(nodes, rules, \u->true);

    _filterMin(nodes, min(l.minCost, r.minCost));
    //merge trees from different branches, filter them by updated minCost, add new trees made from nodes, then apply rules
    mergeLHM(l.trees, r.trees);
    minCost = min(l.minCost, r.minCost);
    filterLHM(l.trees, \u-> cost(u) > minCost);

    currentTrees = makeLinkedUnitHashMap();
    iterLHM(nodes, \u -> {
        newTree = replaceNode(u,tb);
        if (cost(newTree)>ogCost || containsUnit(l.trees, newTree)) {
            nop()
        } else {
            pushUnit(currentTrees, newTree)
        }
    });
    applyRulesToTerms(currentTrees, rules, \u-> {
        cost(u) <= ogCost && !containsUnit(l.trees, u)
    })
    mergeLHM(l.trees, currentTrees);   
    Simplification(l.trees, nodes, _filterMin(l.trees, minCost))
}
_negFindCandidates(v1: Unit, tb: (Unit) -> Unit, rules: Set<SRule>, ogCost: int) -> Simplification {
    l = findCandidates(v1, \u->tb(Negative(u)), rules, ogCost);
    //build all possible permutation of nodes at current step, then apply all possible rules
    nodes = mapLHM(l.nodes, \u -> Negative(u));
    applyRulesToTerms(nodes, rules, \u->true);
    _filterMin(nodes, l.minCost);

    currentTrees = makeLinkedUnitHashMap();
    iterLHM(nodes, \u -> {
        newTree = replaceNode(u,tb);
        if (cost(newTree)>ogCost || containsUnit(l.trees, newTree)) {
            nop()
        } else {
            pushUnit(currentTrees, newTree)
        }
    });
    applyRulesToTerms(currentTrees, rules, \u-> {
        cost(u) <= ogCost && !containsUnit(l.trees, u)
    })
    mergeLHM(l.trees, currentTrees);          
    Simplification(l.trees, nodes, _filterMin(l.trees, l.minCost))        
}


findCandidates(expr: Unit, tb: (Unit) -> Unit, rules: Set<SRule>, ogCost: int) -> Simplification {
    switch(expr) {
        Int(v): _leaf(expr, tb);
        Var(x): _leaf(expr, tb);
        Add(v1,v2): _biFindCandidates(v1,v2, \u1,u2->Add(u1,u2), tb, rules, ogCost);
        Sub(v1,v2): _biFindCandidates(v1,v2, \u1,u2->Sub(u1,u2), tb, rules, ogCost); 
        Mult(v1,v2): _biFindCandidates(v1,v2, \u1,u2->Mult(u1,u2), tb, rules, ogCost); 
        Div(v1,v2): _biFindCandidates(v1,v2, \u1,u2->Div(u1,u2), tb, rules, ogCost); 
        Negative(v): _negFindCandidates(v, tb, rules, ogCost);
    }
}
