import ast;
import ds/hashmap;
import math/hash;

export {
    //map of var:pow
    //TODO: replace with array of Pair
    PTerm : (t: [Pair<string, int>]);
    Polynomial : (e : Tree<PTerm, int>);
    RationalPoly : (p1 : Polynomial, p2 : Polynomial);

    buildConstantTerm() -> PTerm;
    buildTerm1(k: string, v: int) -> PTerm;
    buildPoly1(t: PTerm, v: int) -> Polynomial;
    buildConstantPoly(v: int) -> Polynomial;
    
    addPolynomial(p1: Polynomial, p2: Polynomial)->Polynomial;
    multPolynomial(p1: Polynomial, p2: Polynomial)->Polynomial;
    negatePolynomial(t: Polynomial) -> Polynomial;

    ast2rp(e: Unit) -> RationalPoly;

    t2s(t: PTerm) -> string;
    p2s(p: Polynomial) -> string;
    rp2s(rp: RationalPoly) -> string;
}

treeMergeFn(t1: Tree<?, ??>, t2: Tree<?, ??>, fn: (??, ??) -> ??) -> Tree<?,??> {
    mergeTreeCustom(t1,t2,\k,v1,v2-> fn(v1,v2))
}

buildPolynomialFn(p1: Polynomial, p2: Polynomial, fn: (int, int) -> int) {
    Polynomial(treeMergeFn(p1.e, p2.e, fn))
}

negatePolynomial(t: Polynomial) {
    Polynomial(
        mapTree(
            t.e,
            \v -> -v
        )
    )
}

multTerm(t1: PTerm, t2: PTerm) {
    mapped = map(t1.t, \e->e.first);
    PTerm(sort(concat(
        fold(t1.t,[], \acc,e-> {
            arrayPush(acc,fold(t2.t, e ,\acci,ei-> {
                if (e.first == ei.first) {
                    Pair(acci.first, acci.second + ei.second)
                } else {
                    acci
                }
            }))
        }),
        fold(t2.t,[], \acc, e-> {
        if (contains(mapped, e.first)) {
            acc
        } else {
            arrayPush(acc, e)
        }  
        })
    )))
}

addPolynomial(p1: Polynomial, p2: Polynomial) {
    buildPolynomialFn(p1, p2,\a, b -> a + b)
}

multPolynomial(p1: Polynomial, p2: Polynomial) {
    Polynomial(
        foldTree(
            p1.e,
            makeTree(),
            \k,v,acc -> {
                mergeTreeCustom(
                    acc,
                    foldTree(
                        p2.e,
                        makeTree(),
                        \ki, vi, acci -> {
                            setTree(acci, multTerm(k, ki), v * vi)
                        }
                    ),
                    \kj, v1, v2 -> v1 + v2
                )
            }
        )
    )
}

removeZeroTerms(p: RationalPoly) {
    RationalPoly(
        Polynomial(filterTree(p.p1.e,\k,v->v!=0)),
        Polynomial(filterTree(p.p2.e,\k,v->v!=0))
    )
}

buildConstantTerm() {
    PTerm([])
}

buildTerm1(k: string, v: int) {
    PTerm([Pair(k, v)])
}

buildPoly1(t: PTerm, v: int) {
    Polynomial(makeTree1(t, v))
}

buildConstantPoly(v: int) {
    buildPoly1(buildConstantTerm(), v)
}

ast2rp(e: Unit) -> RationalPoly {
    removeZeroTerms(switch(e) {
        Int(v): {
            RationalPoly(
                buildConstantPoly(v),
                buildConstantPoly(1)
            )
        }
        Var(x): {
            RationalPoly(
                buildPoly1(buildTerm1(x, 1), 1),
                buildConstantPoly(1)
            )
        }
        Negative(v): {
            r = ast2rp(v);
            RationalPoly(
                negatePolynomial(r.p1),
                r.p2
            )         
        }
        Add(v1,v2): {
            l = ast2rp(v1);
            r = ast2rp(v2);
            RationalPoly(
                addPolynomial(
                    multPolynomial(l.p1, r.p2),
                    multPolynomial(r.p1, l.p2)
                ),
                multPolynomial(l.p2, r.p2)
            )
        }
        Sub(v1,v2): {
            l = ast2rp(v1);
            rr = ast2rp(v2);
            r = RationalPoly(negatePolynomial(rr.p1),rr.p2);

            RationalPoly(
                addPolynomial(
                    multPolynomial(l.p1, r.p2),
                    multPolynomial(r.p1, l.p2)
                ),
                multPolynomial(l.p2, r.p2)
            )
        }
        Mult(v1,v2): {
            l = ast2rp(v1);
            r = ast2rp(v2);
            RationalPoly(
                multPolynomial(l.p1,r.p1),
                multPolynomial(l.p2,r.p2)
            )
        }
        Div(v1,v2): {
            l = ast2rp(v1);
            r = ast2rp(v2);
            RationalPoly(
                multPolynomial(l.p1,r.p2),
                multPolynomial(l.p2,r.p1)
            )           
        }
    })
}

t2s(t: PTerm) {
    fold(
        t.t,
        "",
        \acc, e -> {
            acc + e.first + "^" + i2s(e.second)
        }
    )
}

p2s(p: Polynomial) {
    rtrim2(foldTree(
        p.e,
        "",
        \k,v,acc -> {
            acc + i2s(v) + t2s(k) + " + "
        }
    ), "+ ")
}

rp2s(rp: RationalPoly) {
    num = p2s(rp.p1);
    denom = p2s(rp.p2);
    mx = max(strlen(num), strlen(denom));
    mn = min(strlen(num), strlen(denom));
    divstr = strRepeat("-", mx);
    num + "\n" + divstr + "\n" + strRepeat(" ", (mx - mn)/2) + denom
}