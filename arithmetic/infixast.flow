import runtime;
import lingo/pegcode/driver;

export {
    InfixAdd : (v1: InfixUnit, v2: InfixUnit);
    InfixMult : (v1: InfixUnit, v2 : InfixUnit);
    InfixUnit ::= InfixInt, InfixAdd, InfixMult;
    InfixInt : (val: int);

    s2infixAst(s : string) -> InfixUnit;
    infixAst2s(ast : InfixUnit) -> string;
    infixast2i(ast : InfixUnit) -> int;
}

infixLingo : ref Maybe<[PegOp]> = ref None();

s2infixAst(s)-> InfixUnit {
    parsic(onlyOnce(infixLingo, \ -> {
		compilePegGrammar("#include arithmetic\infix.lingo");
	}), s, defaultPegActions)
}

_ast2s(ast: InfixUnit, par)-> string {
    switch (ast) {
        InfixInt(val): i2s(val);
        InfixAdd(v1,v2): {
            arr = infixAst2s(v1)+ "+"+ infixAst2s(v2);
            if(par) 
                concatStrings(["(", arr, ")"])
            else 
                arr;
        }
        InfixMult(v1,v2): concatStrings([_ast2s(v1,true), "*", _ast2s(v2,true)]);        
    }
}

infixAst2s(ast) {
    _ast2s(ast, false)
}

infixast2i(ast) {
    switch(ast) {
        InfixInt(v) : v;
        InfixAdd(v1,v2): infixast2i(v1) + infixast2i(v2);
        InfixMult(v1,v2): infixast2i(v1) * infixast2i(v2);
    }
}